services:
  # default configuration for services in *this* file
  _defaults:
    autowire: true      # Automatically injects dependencies in your services.
    autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
    public: false       # Allows optimizing the container by removing unused services; this also means
    # fetching services directly from the container via $container->get() won't work.
    # The best practice is to be explicit about your dependencies anyway.

  # makes classes in src/ available to be used as services
  # this creates a service per class whose id is the fully-qualified class name
  App\:
    resource: '../app/*'
    exclude:
      - '../app/DependencyInjection/'
      - '../app/Entity/'
      - '../app/Migrations'
      - '../app/Application.php'
      - '../app/Tests/'
      - '../app/Clients/'
      - '../app/Consumers/'
      - '../app/Services/'

  consumer:
    class: App\Consumers\KafkaConsumer
    arguments: ["@logger", "@configs"]
    public: true

  broker_client:
    class: App\Clients\BrokerClient
    arguments: ["%broker.url%", "@logger"]
    public: true

  App\Services\:
    resource: '../app/Services/*'
    arguments: ["@consumer", "@broker_client", "@logger", "@configs"]
    public: true

  App\Mutators\Request\RequestMutatorAbstract:
    abstract: true
    arguments: ['@configs']

  App\Mutators\Request\TopicA\RequestMutator:
    parent: App\Mutators\Request\RequestMutatorAbstract
    public: true

  App\Mutators\Request\TopicB\RequestMutator:
    parent: App\Mutators\Request\RequestMutatorAbstract
    public: true